#pragma once

typedef enum lt_InputKey {
  MOUSE_BUTTON_L,
  MOUSE_BUTTON_R,
  MOUSE_MIDDLE,
  MOUSE_BUTTON_X1,
  MOUSE_BUTTON_X2,
  BACKSPACE,
  TAB,
  DEL,
  ENTER,
  SHIFT,
  CONTROL,
  ALT,
  MENU,
  PAUSE,
  ESCAPE,
  SPACEBAR,
  PAGE_UP,
  PAGE_DOWN,
  END,
  HOME,
  LEFT_ARROW,
  UP_ARROW,
  RIGHT_ARROW,
  DOWN_ARROW,
  SELECT,
  SCREENSHOT,
  EXECUTE,
  PRINT_SCREEN,
  INSERT,
  HELP,
  NUM_0,
  NUM_1,
  NUM_2,
  NUM_3,
  NUM_4,
  NUM_5,
  NUM_6,
  NUM_7,
  NUM_8,
  NUM_9,
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  X,
  Y,
  Z,
  NUMPAD0,
  NUMPAD1,
  NUMPAD2,
  NUMPAD3,
  NUMPAD4,
  NUMPAD5,
  NUMPAD6,
  NUMPAD7,
  NUMPAD8,
  NUMPAD9,
  MULTIPLY,
  PLUS,
  SEPARATOR,
  SUBTRACT,
  NUM_DOT,
  DIVIDE,
  F1,
  F2,
  F3,
  F4,
  F5,
  F6,
  F7,
  F8,
  F9,
  F10,
  F11,
  F12,
  CAPS_LOCK,
  NUM_LOCK,
  SCROLL_LOCK,
  SUPER_L,
  SUPER_R,
  SHIFT_L,
  SHIFT_R,
  ALT_L,
  ALT_R,
  CONTROL_L,
  CONTROL_R,
  KEYS_COUNT
} LT_INPUT_KEY;

typedef enum lt_InputState {
  LT_KEY_UP,
  LT_KEY_DOWN,
  LT_KEY_PRESSED
} LT_INPUT_STATE;

extern void LT_InputInit(void);
extern LT_INPUT_STATE LT_GetKeyState(const LT_INPUT_KEY in_key);
